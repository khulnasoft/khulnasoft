/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { KhulnasoftCore } from "../core.js";
import { subscribersDelete } from "../funcs/subscribersDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useKhulnasoftContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SubscribersDeleteMutationVariables = {
  subscriberId: string;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type SubscribersDeleteMutationData =
  operations.SubscribersControllerRemoveSubscriberResponse;

/**
 * Delete subscriber
 *
 * @remarks
 * Deletes a subscriber entity from the Khulnasoft platform
 */
export function useSubscribersDeleteMutation(
  options?: MutationHookOptions<
    SubscribersDeleteMutationData,
    Error,
    SubscribersDeleteMutationVariables
  >,
): UseMutationResult<
  SubscribersDeleteMutationData,
  Error,
  SubscribersDeleteMutationVariables
> {
  const client = useKhulnasoftContext();
  return useMutation({
    ...buildSubscribersDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeySubscribersDelete(): MutationKey {
  return ["@khulnasoft/api", "Subscribers", "delete"];
}

export function buildSubscribersDeleteMutation(
  client$: KhulnasoftCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SubscribersDeleteMutationVariables,
  ) => Promise<SubscribersDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeySubscribersDelete(),
    mutationFn: function subscribersDeleteMutationFn({
      subscriberId,
      idempotencyKey,
      options,
    }): Promise<SubscribersDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(subscribersDelete(
        client$,
        subscriberId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
