/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { KhulnasoftCore } from "../core.js";
import { workflowsWorkflowControllerSync } from "../funcs/workflowsWorkflowControllerSync.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useKhulnasoftContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type WorkflowsWorkflowControllerSyncMutationVariables = {
  workflowId: string;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type WorkflowsWorkflowControllerSyncMutationData =
  operations.WorkflowControllerSyncResponse;

export function useWorkflowsWorkflowControllerSyncMutation(
  options?: MutationHookOptions<
    WorkflowsWorkflowControllerSyncMutationData,
    Error,
    WorkflowsWorkflowControllerSyncMutationVariables
  >,
): UseMutationResult<
  WorkflowsWorkflowControllerSyncMutationData,
  Error,
  WorkflowsWorkflowControllerSyncMutationVariables
> {
  const client = useKhulnasoftContext();
  return useMutation({
    ...buildWorkflowsWorkflowControllerSyncMutation(client, options),
    ...options,
  });
}

export function mutationKeyWorkflowsWorkflowControllerSync(): MutationKey {
  return ["@khulnasoft/api", "Workflows", "workflowControllerSync"];
}

export function buildWorkflowsWorkflowControllerSyncMutation(
  client$: KhulnasoftCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: WorkflowsWorkflowControllerSyncMutationVariables,
  ) => Promise<WorkflowsWorkflowControllerSyncMutationData>;
} {
  return {
    mutationKey: mutationKeyWorkflowsWorkflowControllerSync(),
    mutationFn: function workflowsWorkflowControllerSyncMutationFn({
      workflowId,
      idempotencyKey,
      options,
    }): Promise<WorkflowsWorkflowControllerSyncMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(workflowsWorkflowControllerSync(
        client$,
        workflowId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
