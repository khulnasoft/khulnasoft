// tsup.config.ts
import { execSync } from "child_process";
import { compress } from "esbuild-plugin-compress";
import { solidPlugin } from "esbuild-plugin-solid";
import fs from "fs";
import path from "path";
import postcss from "postcss";
import loadPostcssConfig from "postcss-load-config";
import { defineConfig } from "tsup";

// package.json
var name = "@khulnasoft/js";
var version = "2.6.6";

// tsup.config.ts
var __injected_dirname__ = "/workspaces/khulnasoft/packages/js";
var processCSS = async (css, filePath) => {
  const { plugins, options } = await loadPostcssConfig({}, filePath);
  const result = await postcss(plugins).process(css, { ...options, from: filePath });
  return result.css;
};
var buildCSS = async () => {
  const cssFilePath = path.join(__injected_dirname__, "./src/ui/index.css");
  const destinationCssFilePath = path.join(__injected_dirname__, "./dist/index.css");
  const css = fs.readFileSync(cssFilePath, "utf-8");
  const processedCss = await processCSS(css, cssFilePath);
  fs.writeFileSync(destinationCssFilePath, processedCss);
};
var isProd = process.env.NODE_ENV === "production";
var isPreview = process.env.IS_PREVIEW === "true";
var previewLastCommitHash = void 0;
if (isPreview) {
  try {
    previewLastCommitHash = execSync("git rev-parse HEAD").toString().trim();
  } catch (error) {
    console.error("Error getting commit hash:", error);
  }
}
var baseConfig = {
  splitting: true,
  sourcemap: false,
  clean: true,
  esbuildPlugins: [solidPlugin()]
};
var baseModuleConfig = {
  ...baseConfig,
  treeshake: true,
  dts: true,
  entry: {
    index: "./src/index.ts",
    "ui/index": "./src/ui/index.ts",
    "themes/index": "./src/ui/themes/index.ts",
    "internal/index": "./src/ui/internal/index.ts"
  },
  define: {
    KHULNASOFT_API_VERSION: `"2024-06-26"`,
    PACKAGE_NAME: `"${name}"`,
    PACKAGE_VERSION: `"${version}"`,
    __DEV__: `${isProd ? false : true}`,
    __PREVIEW_LAST_COMMIT_HASH__: `"${previewLastCommitHash || ""}"`
  }
};
var tsup_config_default = defineConfig((config) => {
  const cjs = {
    ...baseModuleConfig,
    format: "cjs",
    outDir: "dist/cjs",
    tsconfig: "tsconfig.cjs.json"
  };
  const esm = {
    ...baseModuleConfig,
    format: "esm",
    outDir: "dist/esm",
    tsconfig: "tsconfig.json"
  };
  const umd = {
    ...baseConfig,
    entry: { khulnasoft: "src/umd.ts" },
    format: ["iife"],
    minify: true,
    dts: false,
    outExtension: () => {
      return {
        js: ".min.js"
      };
    },
    esbuildPlugins: [
      ...baseConfig.esbuildPlugins ? baseConfig.esbuildPlugins : [],
      compress({
        gzip: true,
        brotli: false,
        outputDir: ".",
        exclude: ["**/*.map"]
      })
    ],
    onSuccess: async () => {
      await buildCSS();
    }
  };
  return [cjs, esm, umd];
});
export {
  tsup_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
